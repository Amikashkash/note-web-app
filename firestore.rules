rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user owns the resource
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Categories collection
    match /categories/{categoryId} {
      // Allow read if user owns the category or it's shared with them
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.sharedWith
      );

      // Allow create if user is authenticated and is the owner
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Allow update/delete only if user owns the category
      allow update, delete: if isOwner(resource.data.userId);
    }

    // Notes collection
    match /notes/{noteId} {
      // Allow read if user owns the note or it's shared with them
      allow read: if isAuthenticated() && (
        resource.data.userId == request.auth.uid ||
        request.auth.uid in resource.data.sharedWith
      );

      // Allow create if user is authenticated and is the owner
      allow create: if isAuthenticated() &&
        request.resource.data.userId == request.auth.uid;

      // Allow update/delete only if user owns the note
      allow update, delete: if isOwner(resource.data.userId);
    }

    // User settings collection
    match /userSettings/{userId} {
      allow read, write: if isOwner(userId);
    }

    // Legacy users collection (optional, for future use)
    match /users/{userId} {
      allow read, write: if isOwner(userId);
    }
  }
}
